// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM8.hdl

/**
 * Memory of 8 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM8 {
    IN in[16], load, address[3];
    OUT out[16];

    PARTS:
    // Put your code here:
    Not(in=address[0], out=not1);
    Not(in=address[1], out=not2);
    Not(in=address[2], out=not3);

    And3way(a=not3, b=not2, c=not1, out=address1);
    And3way(a=not3, b=not2, c=address[0], out=address2);
    And3way(a=not3, b=address[1], c=not1, out=address3);
    And3way(a=not3, b=address[1], c=address[0], out=address4);
    And3way(a=address[2], b=not2, c=not1, out=address5);
    And3way(a=address[2], b=not2, c=address[0], out=address6);
    And3way(a=address[2], b=address[1], c=not1, out=address7);
    And3way(a=address[2], b=address[1], c=address[0], out=address8);

    And(a=address1, b=load, out=load1);
    And(a=address2, b=load, out=load2);
    And(a=address3, b=load, out=load3);
    And(a=address4, b=load, out=load4);
    And(a=address5, b=load, out=load5);
    And(a=address6, b=load, out=load6);
    And(a=address7, b=load, out=load7);
    And(a=address8, b=load, out=load8);

    Register(in=in, load=load1, out=out1);
    Register(in=in, load=load2, out=out2);
    Register(in=in, load=load3, out=out3);
    Register(in=in, load=load4, out=out4);
    Register(in=in, load=load5, out=out5);
    Register(in=in, load=load6, out=out6);
    Register(in=in, load=load7, out=out7);
    Register(in=in, load=load8, out=out8);

    Mux8Way16(a=out1, b=out2, c=out3, d=out4, e=out5, f=out6, g=out7, h=out8, sel=address, out=out);
}